// Generated by gencpp from file utils/GetVisionDevResponse.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_GETVISIONDEVRESPONSE_H
#define UTILS_MESSAGE_GETVISIONDEVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace utils
{
template <class ContainerAllocator>
struct GetVisionDevResponse_
{
  typedef GetVisionDevResponse_<ContainerAllocator> Type;

  GetVisionDevResponse_()
    : dev(0)  {
    }
  GetVisionDevResponse_(const ContainerAllocator& _alloc)
    : dev(0)  {
  (void)_alloc;
    }



   typedef int64_t _dev_type;
  _dev_type dev;





  typedef boost::shared_ptr< ::utils::GetVisionDevResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::GetVisionDevResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetVisionDevResponse_

typedef ::utils::GetVisionDevResponse_<std::allocator<void> > GetVisionDevResponse;

typedef boost::shared_ptr< ::utils::GetVisionDevResponse > GetVisionDevResponsePtr;
typedef boost::shared_ptr< ::utils::GetVisionDevResponse const> GetVisionDevResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::GetVisionDevResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::GetVisionDevResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace utils

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'utils': ['/home/robotis/catkin_ws/src/utils/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::utils::GetVisionDevResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::GetVisionDevResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::GetVisionDevResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::GetVisionDevResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::GetVisionDevResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::GetVisionDevResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::GetVisionDevResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "28d20ec34b723ab37e9c2029519bbce4";
  }

  static const char* value(const ::utils::GetVisionDevResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x28d20ec34b723ab3ULL;
  static const uint64_t static_value2 = 0x7e9c2029519bbce4ULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::GetVisionDevResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/GetVisionDevResponse";
  }

  static const char* value(const ::utils::GetVisionDevResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::GetVisionDevResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 dev\n\
";
  }

  static const char* value(const ::utils::GetVisionDevResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::GetVisionDevResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dev);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetVisionDevResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::GetVisionDevResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::GetVisionDevResponse_<ContainerAllocator>& v)
  {
    s << indent << "dev: ";
    Printer<int64_t>::stream(s, indent + "  ", v.dev);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_GETVISIONDEVRESPONSE_H
